{"version":3,"sources":["views/Dashboard/Summary.js"],"names":["axios","require","Summary","props","React","useState","allData","setAllData","barData","setBarData","useEffect","get","then","response","data","makeBar","catch","error","console","log","spaceData","spaceData2","spaceLabel","spaceLabel2","map","d","push","SPACE_AVAILABLE","SPACE_UTILIZED","LOCN_NAME","SPACE_CAPACITY","labels","datasets","stack","label","indexLabel","backgroundColor","container","options","scales","xAxes","stacked","yAxes","index","plugins","datalabels","display","color","animation","duration","item","body","style","width","height","alignItems","colorPower","colorSpace","colorRack","POWER_UTILIZATION","SPACE_UTILIZATION","RACK_UTILIZATION","xs","sm","md","lg","id","LOCN_ID","padding","className","marginBottom","POWER_INSERVICE","POWER_RESERVED","POWER_CAPACITY","RACK_UTILIZED","RACK_CAPACITY"],"mappings":"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","file":"static/js/111.442907e9.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Pie, Bar } from 'react-chartjs-2';\r\nimport Container from '@material-ui/core/Container';\r\nimport {Grid, Paper, Box } from '@material-ui/core';\r\nimport 'chartjs-plugin-datalabels';\r\nimport { Badge, Button,CardTitle,CardText, Card, CardBody, CardFooter, CardHeader,Progress, Col, Form, FormGroup, Label, Row, Input } from 'reactstrap';\r\n\r\nconst axios = require('axios');\r\n\r\nconst Summary = (props) => {\r\n    const [allData, setAllData] = React.useState([]);\r\n    const [cardColor, setCardColor] = React.useState('');\r\n    const [barData, setBarData] = React.useState([]);\r\n\r\n    useEffect(() => {\r\n        axios.get('/api/DC_DASHBOARD_INFO')\r\n            .then(function (response) {\r\n                //console.log('d',response.data);\r\n            \r\n                // handle success\r\n                if (response.data) {\r\n                    setAllData(response.data);\r\n                    makeBar(response.data);\r\n                };\r\n            })\r\n            .catch(function (error) {\r\n                // handle error\r\n                console.log(error);\r\n            })\r\n    });\r\n\r\n\r\n    const makeBar = (data) => {\r\n        //console.log('makeBar',data);\r\n        \r\n        var spaceData = [],\r\n            spaceData2 = [],\r\n            spaceLabel = [],\r\n            spaceLabel2 = [];\r\n\r\n        data.map((d) => {\r\n            spaceData.push(d.SPACE_AVAILABLE);\r\n            spaceData2.push(d.SPACE_UTILIZED);\r\n            spaceLabel.push(d.LOCN_NAME);\r\n            spaceLabel2.push(d.SPACE_CAPACITY);\r\n        });\r\n\r\n        const arbitraryStackKey = \"stack\"; /**to make stack bar */\r\n\r\n        const state = {\r\n            labels: spaceLabel,\r\n            datasets: [\r\n                {\r\n                    stack: arbitraryStackKey,\r\n                    label: 'Available DC Space (sqft)',\r\n                    indexLabel: spaceLabel2,\r\n                    backgroundColor: 'rgba(0, 20, 187)',\r\n                    data: spaceData\r\n                  },\r\n                  {\r\n                    stack: arbitraryStackKey,\r\n                    label: 'Utilize DC Space (sqft)',\r\n                    backgroundColor: 'rgba(248, 111, 27)',\r\n                    data: spaceData2   \r\n                  }\r\n                // {\r\n                //     label: 'Available DC Space (sqft)',\r\n                //     backgroundColor: 'rgba(0, 20, 187)',\r\n                //     borderColor: 'rgba(255,99,132,1)',\r\n                //     borderWidth: 1,\r\n                //     //hoverBackgroundColor: 'rgba(255,99,132,0.4)',\r\n                //     //hoverBorderColor: 'rgba(255,99,132,1)',\r\n                //     data: spaceData\r\n                // },\r\n                // {\r\n                //     label: 'Utilize DC Space (sqft)',\r\n                //     backgroundColor: 'rgba(248, 111, 27)',\r\n                //     borderColor: 'rgba(255,99,132,1)',\r\n                //     borderWidth: 1,\r\n                //     //hoverBackgroundColor: 'rgba(182, 248, 115)',\r\n                //     //hoverBorderColor: 'rgba(255,99,132,1)',\r\n                //     data: spaceData2\r\n                // }\r\n            ]\r\n        };\r\n        setBarData(state);\r\n\r\n    }\r\n\r\n    const options = {\r\n        scales: {\r\n             xAxes: [{\r\n                 stacked: true,\r\n             }],\r\n             yAxes: [{\r\n                 stacked: true,\r\n                 index: true\r\n             }]\r\n         },\r\n         plugins: {/**display label inside bar */\r\n            datalabels: {\r\n               display: true,\r\n               color: 'white',\r\n            }\r\n         },\r\n         animation: {\r\n            duration: 0,\r\n            // onComplete: function () {\r\n            //     var ctx = props.chart.ctx;\r\n            //     ctx.font = props.Chart.helpers.fontString(props.Chart.defaults.global.defaultFontFamily, 'normal', props.Chart.defaults.global.defaultFontFamily);\r\n            //     ctx.fillStyle = \"black\";\r\n            //     ctx.textAlign = 'center';\r\n            //     ctx.textBaseline = 'bottom';\r\n        \r\n            //     this.data.datasets.forEach(function (dataset)\r\n            //     {\r\n            //         for (var i = 0; i < dataset.data.length; i++) {\r\n            //             for(var key in dataset._meta)\r\n            //             {\r\n            //                 var model = dataset._meta[key].data[i]._model;\r\n            //                 ctx.fillText(dataset.data[i], model.x, model.y - 5);\r\n            //             }\r\n            //         }\r\n            //     });\r\n            // }\r\n          },\r\n     }\r\n    \r\n    return (<Container>\r\n            <Grid container>\r\n                <h2>SUMMARY OF DC LOCATION SPACE UTILIZATION</h2>\r\n                <Bar \r\n                    data={barData} \r\n                    options={options}\r\n                />\r\n            </Grid>\r\n            <Grid container>\r\n            <h2>EXECUTIVE SUMMARY FOR DCO 1</h2>\r\n            <Grid container>\r\n                <Grid item>\r\n                <h5>Lagend:</h5>\r\n                        <Row>\r\n                            <Col>\r\n                                <Card body color=\"success\" style={{width:'180px', height: '5px', alignItems: 'center'}}><CardTitle><h6>Below 70%</h6></CardTitle></Card>\r\n                            </Col>\r\n                            <Col>\r\n                                <Card body color=\"warning\" style={{width:'180px', height: '5px', alignItems: 'center'}}><CardTitle><h6>Between 70%-98%</h6></CardTitle></Card>\r\n                            </Col>\r\n                            <Col>\r\n                                <Card body color=\"danger\" style={{width:'180px', height: '5px', alignItems: 'center'}}><CardTitle><h6>90% and above</h6></CardTitle></Card>\r\n                            </Col>\r\n                        </Row>\r\n               </Grid>\r\n             </Grid>\r\n            <Grid container>\r\n                    {\r\n                        allData.map((d,index)=>{\r\n                            \r\n                            var colorPower = \"\";\r\n                            var colorSpace = \"\";\r\n                            var colorRack = \"\";\r\n                            \r\n                            if(d.POWER_UTILIZATION < '75%'){\r\n                                colorPower= \"success\" \r\n                            }\r\n                            else if(d.POWER_UTILIZATION >= '75%'){\r\n                                colorPower= \"warning\"\r\n                            }\r\n                            else if(d.POWER_UTILIZATION >= '90%'){\r\n                                colorPower= \"danger\"\r\n                            }\r\n\r\n                            if(d.SPACE_UTILIZATION < '75%'){\r\n                                colorSpace= \"success\"  \r\n                            }\r\n                            else if(d.SPACE_UTILIZATION >= '75%'){\r\n                                colorSpace= \"warning\"\r\n                            }\r\n                            else if(d.SPACE_UTILIZATION >= '90%'){\r\n                                colorSpace= \"danger\"\r\n                            }\r\n\r\n                            if(d.RACK_UTILIZATION < '75%'){\r\n                                colorRack= \"success\"   \r\n                            }\r\n                            else if(d.RACK_UTILIZATION >= '75%'){\r\n                                colorRack= \"warning\"\r\n                            }\r\n                            else if(d.RACK_UTILIZATION >= '90%'){\r\n                                colorRack= \"danger\"\r\n                            }\r\n                        \r\n                    \r\n                            return(\r\n                                <Grid item xs={12} sm={12} md={4} lg={4}>\r\n                                    <Card id={d.LOCN_ID} style={{padding: '10px'}}>\r\n                                        <div className=\"animated fadeIn\" style={{padding: '10px'}}>\r\n                                        <h6>{d.LOCN_NAME}</h6>\r\n                                        <Card body id={d.POWER_UTILIZATION} color={colorPower} style={{marginBottom: '0px'}}>\r\n                                            <Row>\r\n                                                <Col xs='4'>\r\n                                                    <CardTitle><h3><strong>{d.POWER_UTILIZATION}</strong></h3></CardTitle>\r\n                                                    <CardText>Used & Reserved Power</CardText>\r\n                                                </Col>\r\n                                                <Col xs='2'>\r\n                                                    <CardText>{d.POWER_UTILIZATION}</CardText>{ /** used power percentage */}\r\n                                                    <CardText>{d.POWER_UTILIZATION}</CardText>{ /** reserved power percentege*/}\r\n                                                </Col>\r\n                                                <Col xs='3'>\r\n                                                    <CardText>{d.POWER_INSERVICE} (kW)</CardText>{ /** used power */}\r\n                                                    <CardText>{d.POWER_RESERVED} (kW)</CardText>{ /** reserved power */}\r\n                                                    <CardText>{d.POWER_CAPACITY} (kW)</CardText>{ /** capacity power */}\r\n                                                </Col>\r\n                                                <Col xs='3'>\r\n                                                    <CardText>Used</CardText>{ /** used power */}\r\n                                                    <CardText>Reserved</CardText>{ /** reserved power */}\r\n                                                    <CardText>Capacity</CardText>{ /** capacity power */}\r\n                                                </Col>\r\n                                            </Row>\r\n                                        </Card>\r\n                                        <Card body id={d.SPACE_UTILIZATION} color={colorSpace} style={{marginBottom: '0px'}}>\r\n                                            <Row>\r\n                                                <Col xs='4'>\r\n                                                    <CardTitle><h3><strong>{d.SPACE_UTILIZATION}</strong></h3></CardTitle>\r\n                                                    <CardText>Used Space</CardText>\r\n                                                </Col>\r\n                                                <Col xs='2'>\r\n                                                {/**empty */}\r\n                                                </Col>\r\n                                                <Col xs='3'>\r\n                                                    <CardText>{d.SPACE_UTILIZED} (sqft)</CardText>{ /** used space */}\r\n                                                    <CardText>{d.SPACE_CAPACITY} (sqft)</CardText>{ /** capacity space */}\r\n                                                </Col>\r\n                                                <Col xs='3'>\r\n                                                    <CardText>Used</CardText>{ /** used space */}\r\n                                                    <CardText>Capacity</CardText>{ /** capacity space */}\r\n                                                </Col>\r\n                                            </Row>\r\n                                        </Card>\r\n                                        <Card body id={d.RACK_UTILIZATION} color={colorRack} style={{marginBottom: '0px'}}>\r\n                                            <Row>\r\n                                                <Col xs='4'>\r\n                                                    <CardTitle><h3><strong>{d.RACK_UTILIZATION}</strong></h3></CardTitle>\r\n                                                    <CardText>Used Rack</CardText>\r\n                                                </Col>\r\n                                                <Col xs='2'>\r\n                                                {/**empty */}\r\n                                                </Col>\r\n                                                <Col xs='3'>\r\n                                                    <CardText>{d.RACK_UTILIZED} (onos)</CardText>{ /** used rack */}\r\n                                                    <CardText>{d.RACK_CAPACITY} (onos)</CardText>{ /** capacity rack */}\r\n                                                </Col>\r\n                                                <Col xs='3'>\r\n                                                    <CardText>Used</CardText>{ /** used rack */}\r\n                                                    <CardText>Capacity</CardText>{ /** capacity rack */}\r\n                                                </Col>\r\n                                            </Row>\r\n                                        </Card>\r\n                                    </div>\r\n                                    </Card>\r\n                            </Grid>\r\n                            )\r\n                        })\r\n                    }\r\n             </Grid>\r\n        </Grid>\r\n        </Container>);\r\n}\r\nexport default Summary;"],"sourceRoot":""}